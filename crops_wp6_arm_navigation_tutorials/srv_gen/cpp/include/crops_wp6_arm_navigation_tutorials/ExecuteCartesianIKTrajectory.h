/* Auto-generated by genmsg_cpp for file /home/tienthanh/workspace/ros/fuerte/mebios/tienthanh/crops_wp6_manipulator/crops_wp6_arm_navigation_tutorials/srv/ExecuteCartesianIKTrajectory.srv */
#ifndef CROPS_WP6_ARM_NAVIGATION_TUTORIALS_SERVICE_EXECUTECARTESIANIKTRAJECTORY_H
#define CROPS_WP6_ARM_NAVIGATION_TUTORIALS_SERVICE_EXECUTECARTESIANIKTRAJECTORY_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Pose.h"



namespace crops_wp6_arm_navigation_tutorials
{
template <class ContainerAllocator>
struct ExecuteCartesianIKTrajectoryRequest_ {
  typedef ExecuteCartesianIKTrajectoryRequest_<ContainerAllocator> Type;

  ExecuteCartesianIKTrajectoryRequest_()
  : header()
  , poses()
  {
  }

  ExecuteCartesianIKTrajectoryRequest_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , poses(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _poses_type;
  std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  poses;


  typedef boost::shared_ptr< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ExecuteCartesianIKTrajectoryRequest
typedef  ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest_<std::allocator<void> > ExecuteCartesianIKTrajectoryRequest;

typedef boost::shared_ptr< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest> ExecuteCartesianIKTrajectoryRequestPtr;
typedef boost::shared_ptr< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest const> ExecuteCartesianIKTrajectoryRequestConstPtr;


template <class ContainerAllocator>
struct ExecuteCartesianIKTrajectoryResponse_ {
  typedef ExecuteCartesianIKTrajectoryResponse_<ContainerAllocator> Type;

  ExecuteCartesianIKTrajectoryResponse_()
  : success(0)
  {
  }

  ExecuteCartesianIKTrajectoryResponse_(const ContainerAllocator& _alloc)
  : success(0)
  {
  }

  typedef uint32_t _success_type;
  uint32_t success;


  typedef boost::shared_ptr< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct ExecuteCartesianIKTrajectoryResponse
typedef  ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryResponse_<std::allocator<void> > ExecuteCartesianIKTrajectoryResponse;

typedef boost::shared_ptr< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryResponse> ExecuteCartesianIKTrajectoryResponsePtr;
typedef boost::shared_ptr< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryResponse const> ExecuteCartesianIKTrajectoryResponseConstPtr;

struct ExecuteCartesianIKTrajectory
{

typedef ExecuteCartesianIKTrajectoryRequest Request;
typedef ExecuteCartesianIKTrajectoryResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct ExecuteCartesianIKTrajectory
} // namespace crops_wp6_arm_navigation_tutorials

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "916c28c5764443f268b296bb671b9d97";
  }

  static const char* value(const  ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x916c28c5764443f2ULL;
  static const uint64_t static_value2 = 0x68b296bb671b9d97ULL;
};

template<class ContainerAllocator>
struct DataType< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "crops_wp6_arm_navigation_tutorials/ExecuteCartesianIKTrajectoryRequest";
  }

  static const char* value(const  ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
geometry_msgs/Pose[] poses\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "952fc3b34491dbd8ce5170ced8b373fa";
  }

  static const char* value(const  ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x952fc3b34491dbd8ULL;
  static const uint64_t static_value2 = 0xce5170ced8b373faULL;
};

template<class ContainerAllocator>
struct DataType< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "crops_wp6_arm_navigation_tutorials/ExecuteCartesianIKTrajectoryResponse";
  }

  static const char* value(const  ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint32 success\n\
\n\
\n\
";
  }

  static const char* value(const  ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.poses);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ExecuteCartesianIKTrajectoryRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.success);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct ExecuteCartesianIKTrajectoryResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectory> {
  static const char* value() 
  {
    return "d904d75e10f01066c74bf87962ffff22";
  }

  static const char* value(const crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectory&) { return value(); } 
};

template<>
struct DataType<crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectory> {
  static const char* value() 
  {
    return "crops_wp6_arm_navigation_tutorials/ExecuteCartesianIKTrajectory";
  }

  static const char* value(const crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectory&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d904d75e10f01066c74bf87962ffff22";
  }

  static const char* value(const crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "crops_wp6_arm_navigation_tutorials/ExecuteCartesianIKTrajectory";
  }

  static const char* value(const crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d904d75e10f01066c74bf87962ffff22";
  }

  static const char* value(const crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "crops_wp6_arm_navigation_tutorials/ExecuteCartesianIKTrajectory";
  }

  static const char* value(const crops_wp6_arm_navigation_tutorials::ExecuteCartesianIKTrajectoryResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CROPS_WP6_ARM_NAVIGATION_TUTORIALS_SERVICE_EXECUTECARTESIANIKTRAJECTORY_H

